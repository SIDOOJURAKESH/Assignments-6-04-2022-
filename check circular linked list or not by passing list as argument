#include <stdio.h>
#include <stdlib.h>

typedef struct stu
{
    int data;
    struct stu *link;
}node;

void Create_Circular_list(node **);
void Create_SLL(node **,int );
void Check_circular_list(node **);

int main()
{
    node *head=NULL;
    int x,n,len;
    while(1)
    {
        printf("\n1.Create circularlinked list\n2.sll create\n3.check circular or not\n0.exit\n");
        scanf("%d",&x);
        switch(x)
        {
            case 1: Create_Circular_list(&head);
                    break;
            case 2: printf("Enter the length of the linked list: \n");
                    scanf("%d",&len);
                    Create_SLL(&head,len);
                    break;
            case 3: Check_circular_list(&head);
                    break;
            default:exit(1);
        }
    }
    return 0;
}

void Create_Circular_list(node **head)
{
    node *new,*temp=NULL;
    int i,len;
    printf("Enter the length of the linked list: \n");
    scanf("%d",&len);
    for(i=1;i<=len;i++)
    {
        new=(node *)malloc(sizeof(node));
        printf("Enter elements in a list: ");
        scanf("%d",&new->data);
        new->link=NULL;
        if((*head)==NULL)
        {
            (*head)=temp=new;
        }
        else
        {
            temp->link=new;
            temp=new;
        }
        temp->link=(*head);

    }  
}

void Create_SLL(node **head,int len)
{
     node *new,*temp=NULL;
    int i;
    for(i=1;i<=len;i++)
    {
        new=(node *)malloc(sizeof(node));
        printf("Enter elements in a list: ");
        scanf("%d",&new->data);
        new->link=NULL;
        if((*head)==NULL)
        {
            (*head)=temp=new;
        }
        else
        {
            temp->link=new;
            temp=new;
        }
    }  
}

void Check_circular_list(node **head)
{
     if((*head)==NULL)
    {
        printf("list is empty\n");
    }
    else
    {
        node *temp_node=(*head);
        while((temp_node!=NULL) & ((temp_node)->link!=(*head)))
        {
            temp_node=temp_node->link;
        }
        if((temp_node!=NULL) & ((temp_node)->link==(*head)))
        {
            printf("List is Circular single list\n");
        }
        else
        {
		    printf("List is not a Circular single list\n");
	    }
    }
}
